-
    I create a new Employee with appraisal configuration.
-
    !record {model: hr.employee, id: employee_niv0, view: False}:
        name: 'Michael Hawkins'
        department_id : hr.dep_rd
        parent_id : hr.employee_al
        job_id : hr.job_developer
        work_location : 'Grand-Rosi√®re'
        work_phone : '+3281813700'
        work_email : 'michael@openerp.com'
        appraisal_manager : 1
        apprasial_manager_ids :
            - hr.employee_al
        apprasial_manager_survey_id : survey.feedback_form
        appraisal_colleagues : 1
        appraisal_colleagues_ids :
            - hr.employee_stw
        appraisal_colleagues_survey_id : opinion_form
        appraisal_self : 1
        appraisal_self_survey_id : appraisal_form
        appraisal_repeat : 1
        appraisal_repeat_number : 1
        appraisal_repeat_delay : 'year'
        evaluation_date : !eval time.strftime('%Y-%m-%d')
-
    I run the scheduler
-
    !python {model: hr.employee}: |
        self.run_employee_evaluation(cr, uid, automatic='False', use_new_cursor='False') #cronjob
-
    I check whether new appraisal is created for above employee or not
-
    !python {model: hr_evaluation.evaluation}: |
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        assert ids, "Appraisal not created"
-
    I check next evaluation date
-
    !python {model: hr.employee}: |
        from datetime import date
        from dateutil.relativedelta import relativedelta
        rec = self.browse(cr, uid, ref('employee_niv0'), context)
        assert rec.evaluation_date == str(date.today()+ relativedelta(years=1)), 'Next appraisal date is wrong'
-
    I start the evaluation process by click on "Start Appraisal" button.
-
    !python {model: hr_evaluation.evaluation}: |
        from datetime import date
        from dateutil.relativedelta import relativedelta
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        self.write(cr, uid, ids, {'date_close': str(date.today()+ relativedelta(days=5))})
        self.button_sent_appraisal(cr, uid, ids)
-
    I check that state is "Appraisal Sent".
-
    !python {model: hr_evaluation.evaluation}: |
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        record = self.browse(cr, uid, ids, context)
        assert record.state == 'pending', "Evaluation should be 'Appraisal Sent' state"
-
    I check that state is "Appraisal Sent" and set " Final Interview Date"
-
    !python {model: hr_evaluation.evaluation}: |
        from datetime import date
        from dateutil.relativedelta import relativedelta
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        record = self.browse(cr, uid, ids, context)
        assert record.state == 'pending', "Evaluation should be 'Appraisal Sent' state"
        self.write(cr, uid, ids, {'interview_deadline': str(date.today()+ relativedelta(months=1))})
-
    I check whether final interview meeting is created or not
-
    !python {model: hr_evaluation.evaluation}: |
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        record = self.browse(cr, uid, ids, context)
        assert record.meeting_id, 'Meeting is not created'
-
    I close this Apprisal by click on "Done" button
-
    !python {model: hr_evaluation.evaluation}: |
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        self.button_done_appraisal(cr, uid, ids)
-
    I check that state of Evaluation is done.
-
    !python {model: hr_evaluation.evaluation}: |
        ids = self.search(cr, uid, [('employee_id', '=', ref('employee_niv0'))])
        record = self.browse(cr, uid, ids, context)
        assert record.state == 'done', "Evaluation should be in done state"
